#!/usr/bin/env node

const mongoose = require('mongoose');
const bcryptjs = require('bcryptjs');
const readline = require('readline');
require('dotenv').config();

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (prompt) => {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
};

// Conectar a MongoDB
const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/biblioteca');
        console.log(`MongoDB conectado: ${conn.connection.host}`);
    } catch (error) {
        console.error('Error conectando a MongoDB:', error.message);
        process.exit(1);
    }
};

// Esquemas
const PersonSchema = new mongoose.Schema({
    doc: String,
    apellido1: String,
    apellido2: String,
    nombre1: String,
    nombre2: String,
    tipoPersona: String,
    estado: String
}, { timestamps: true });

const UserSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String,
    role: String,
    isActive: Boolean,
    personRef: { type: mongoose.Schema.Types.ObjectId, ref: 'Person' }
}, { timestamps: true });

const Person = mongoose.model('Person', PersonSchema);
const User = mongoose.model('User', UserSchema);

async function resetSuperAdminPassword() {
    try {
        await connectDB();
        
        console.log('üîê RESET DE CONTRASE√ëA DEL SUPERADMIN');
        console.log('=====================================');
        console.log('');
        
        // Buscar superadmin
        const superadmin = await User.findOne({ role: 'superadmin' }).populate('personRef');
        
        if (!superadmin) {
            console.log('‚ùå No se encontr√≥ ning√∫n SuperAdministrador en el sistema');
            console.log('');
            console.log('üí° Para crear uno nuevo, ejecuta:');
            console.log('   npm run create-superadmin');
            return;
        }
        
        console.log('üë§ SuperAdmin encontrado:');
        console.log(`   Username: ${superadmin.username}`);
        console.log(`   Email: ${superadmin.email || 'No especificado'}`);
        if (superadmin.personRef) {
            console.log(`   Nombre: ${superadmin.personRef.nombre1} ${superadmin.personRef.apellido1}`);
        }
        console.log('');
        
        // Pedir nueva contrase√±a
        const newPassword = await question('üîí Nueva contrase√±a: ');
        
        if (!newPassword || newPassword.length < 6) {
            console.log('‚ùå La contrase√±a debe tener al menos 6 caracteres');
            return;
        }
        
        const confirmPassword = await question('üîí Confirmar contrase√±a: ');
        
        if (newPassword !== confirmPassword) {
            console.log('‚ùå Las contrase√±as no coinciden');
            return;
        }
        
        console.log('');
        console.log('üîÑ Actualizando contrase√±a...');
        
        // Hash de la nueva contrase√±a
        const salt = await bcryptjs.genSalt(12);
        const hashedPassword = await bcryptjs.hash(newPassword, salt);
        
        // Actualizar en la base de datos
        superadmin.password = hashedPassword;
        await superadmin.save();
        
        console.log('‚úÖ ¬°Contrase√±a actualizada exitosamente!');
        console.log('');
        console.log('üîë Credenciales de login:');
        console.log(`   Username: ${superadmin.username}`);
        console.log(`   Password: ${newPassword}`);
        console.log('');
        console.log('üöÄ Ahora puedes hacer login con estas credenciales');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        rl.close();
        mongoose.connection.close();
    }
}

resetSuperAdminPassword();
